import os
import json
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class Person(Base):
    __tablename__ = "persons"
    
    id = Column(Integer, primary_key=True, index=True)
    fio = Column(String, nullable=False)
    phone = Column(String, nullable=False)
    birth = Column(String, nullable=False)
    car_number = Column(String, nullable=True)
    address = Column(Text, nullable=True)
    passport = Column(String, nullable=True)

class UserLog(Base):
    __tablename__ = "user_logs"
    
    id = Column(Integer, primary_key=True, index=True)
    timestamp = Column(DateTime, default=datetime.utcnow)
    user_id = Column(Integer, nullable=False)
    username = Column(String, nullable=True)
    action = Column(String, nullable=False)
    details = Column(Text, nullable=True)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(bind=engine)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
USER_ACCESS_CODE = "12345"  # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
ADMIN_ACCESS_CODE = "77777"  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
class AddPersonStates(StatesGroup):
    waiting_for_fio = State()      # –û–∂–∏–¥–∞–Ω–∏–µ –§–ò–û
    waiting_for_phone = State()    # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    waiting_for_birth = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    waiting_for_car = State()      # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    waiting_for_address = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    waiting_for_passport = State() # –û–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

class SearchStates(StatesGroup):
    waiting_for_query = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

class CancelStates(StatesGroup):
    waiting_for_cancel = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
authorized_users = set()  # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
authorized_admins = set()  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
authorized_usernames = set()  # –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
user_temp_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
def format_record(record):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ—Å—Ç–æ–º –∏ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ"""
    result = f"üë§ –§–ò–û: {record.fio}\n"
    result += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {record.phone}\n"
    result += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {record.birth}\n"
    
    if record.car_number:
        result += f"üöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {record.car_number}\n"
    if record.address:
        result += f"üè† –ê–¥—Ä–µ—Å: {record.address}\n"
    if record.passport:
        result += f"üìÑ –ü–∞—Å–ø–æ—Ä—Ç: {record.passport}\n"
    
    return result.rstrip()  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def load_database():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = SessionLocal()
        persons = db.query(Person).all()
        db.close()
        return persons
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def save_person(person_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = SessionLocal()
        person = Person(**person_data)
        db.add(person)
        db.commit()
        db.refresh(person)
        db.close()
        return person
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return None

def search_persons(query):
    """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    try:
        db = SessionLocal()
        persons = db.query(Person).filter(
            Person.fio.contains(query) |
            Person.phone.contains(query) |
            Person.car_number.contains(query) |
            Person.address.contains(query) |
            Person.passport.contains(query)
        ).all()
        db.close()
        return persons
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    db.close()
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    logger.error("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_user_action(user_id, username, action, details=""):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥"""
    # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        normalized_username = (username or "").strip()
        if action.startswith("AUTH") and (
            user_id in authorized_users or
            user_id in authorized_admins or
            (normalized_username and normalized_username in authorized_usernames)
        ):
            return
    except Exception:
        # –í —Å–ª—É—á–∞–µ –ª—é–±—ã—Ö —Å–±–æ–µ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        pass
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"USER: {user_id} ({username}) | ACTION: {action} | DETAILS: {details}"
    logger.info(log_message)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        db = SessionLocal()
        log_entry = UserLog(
            user_id=user_id,
            username=username,
            action=action,
            details=details
        )
        db.add(log_entry)
        db.commit()
        db.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_user_logs(limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        db = SessionLocal()
        logs = db.query(UserLog).order_by(UserLog.timestamp.desc()).limit(limit).all()
        db.close()
        return [{
            "timestamp": log.timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "user_id": log.user_id,
            "username": log.username,
            "action": log.action,
            "details": log.details
        } for log in logs]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        return []

def get_failed_auth_logs(limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        db = SessionLocal()
        logs = db.query(UserLog).filter(UserLog.action == 'AUTH_FAILED').order_by(UserLog.timestamp.desc()).limit(limit).all()
        db.close()
        return [{
            "timestamp": log.timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "user_id": log.user_id,
            "username": log.username,
            "action": log.action,
            "details": log.details
        } for log in logs]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        return []

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=False,
        keyboard=[
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")],
            [KeyboardButton(text="üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")]
        ]
    )
    return keyboard

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=False,
        keyboard=[
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")],
            [KeyboardButton(text="üìä –õ–æ–≥–∏"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")]
        ]
    )
    return keyboard

def get_inline_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å", callback_data="search")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="add")],
            [InlineKeyboardButton(text="üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="info")]
        ]
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–æ–ª–µ–π
def is_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ª—é–±–∞—è —Ä–æ–ª—å)"""
    return user_id in authorized_users or user_id in authorized_admins

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in authorized_admins

def get_user_role(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in authorized_admins:
        return "admin"
    elif user_id in authorized_users:
        return "user"
    else:
        return "unauthorized"

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    if is_authorized(user_id):
        role = get_user_role(user_id)
        if role == "admin":
            log_user_action(user_id, username, "START_COMMAND", "–í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            help_text = """üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!

ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
üîß –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –≤–∫–ª—é—á–∞—è –ª–æ–≥–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"""
            await message.answer(help_text, reply_markup=get_admin_keyboard())
        else:
            log_user_action(user_id, username, "START_COMMAND", "–í—Ö–æ–¥ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            help_text = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"""
            await message.answer(help_text, reply_markup=get_main_keyboard())
    else:
        log_user_action(user_id, username, "START_COMMAND", "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞
@dp.message_handler(lambda message: not is_authorized(message.from_user.id) and not message.text.startswith('/'))
async def check_access_code(message: types.Message):
    entered_code = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    if entered_code == USER_ACCESS_CODE:
        authorized_users.add(user_id)
        if username:
            authorized_usernames.add(username)
        log_user_action(user_id, username, "AUTH_SUCCESS", f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–¥–æ–º: {entered_code}")
        help_text = """‚úÖ –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏–Ω—è—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"""
        await message.answer(help_text, reply_markup=get_main_keyboard())
    elif entered_code == ADMIN_ACCESS_CODE:
        authorized_admins.add(user_id)
        if username:
            authorized_usernames.add(username)
        log_user_action(user_id, username, "AUTH_SUCCESS", f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–æ–¥–æ–º: {entered_code}")
        help_text = """üëë –ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
üîß –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –≤–∫–ª—é—á–∞—è –ª–æ–≥–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"""
        await message.answer(help_text, reply_markup=get_admin_keyboard())
    else:
        log_user_action(user_id, username, "AUTH_FAILED", f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥: {entered_code}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(lambda message: message.text == "üîç –ü–æ–∏—Å–∫")
async def search_button_handler(message: types.Message, state: FSMContext):
    if not is_authorized(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /start")
        return
    await SearchStates.waiting_for_query.set()
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "<i>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ–º–µ—Ä –∞–≤—Ç–æ, –∞–¥—Ä–µ—Å –∏–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç):</i>",
        parse_mode='HTML'
    )

@dp.message_handler(state=SearchStates.waiting_for_query)
async def process_search_query(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"

    # –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start
    if message.text == "/start":
        role = get_user_role(user_id)
        keyboard = get_admin_keyboard() if role == "admin" else get_main_keyboard()
        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=keyboard)
        await state.finish()
        return

    query = message.text.strip()
    if not query:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
        return

    results = []
    persons = search_persons(query)
    for person in persons:
        results.append(format_record(person))

    if results:
        log_user_action(user_id, username, "SEARCH_SUCCESS", f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        result_message = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}</b>\n\n"
        result_message += "\n\n".join(results)
        await message.answer(result_message, parse_mode='HTML')
    else:
        log_user_action(user_id, username, "SEARCH_NO_RESULTS", f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        await message.answer("üîç <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</i>", parse_mode='HTML')

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    role = get_user_role(user_id)
    keyboard = get_admin_keyboard() if role == "admin" else get_main_keyboard()
    await state.finish()
    await message.answer(" ", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def add_button_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    if not is_authorized(user_id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /start")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_temp_data[user_id] = {}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await AddPersonStates.waiting_for_fio.set()
    log_user_action(user_id, username, "ADD_START", "–ù–∞—á–∞–ª–æ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=False,
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]]
    )
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏</b>\n\n"
        "üîÑ <b>–®–∞–≥ 1/6:</b> –í–≤–µ–¥–∏—Ç–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)\n\n"
        "üí° <i>–ü—Ä–∏–º–µ—Ä:</i> –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û
@dp.message_handler(state=AddPersonStates.waiting_for_fio)
async def process_fio(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–û—Ç–º–µ–Ω–∞"
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_add_process(message, state, user_id, username)
        return
    
    fio = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)
    if len(fio.split()) < 2:
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.\n\nüîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</i>", parse_mode='HTML')
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_temp_data[user_id]['fio'] = fio
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await AddPersonStates.waiting_for_phone.set()
    await message.answer(
        "‚úÖ <b>–§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b> " + fio + "\n\n"
        "üîÑ <b>–®–∞–≥ 2/6:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "üì± <i>–§–æ—Ä–º–∞—Ç:</i> 11 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 79991234567)",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=AddPersonStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–û—Ç–º–µ–Ω–∞"
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_add_process(message, state, user_id, username)
        return
    
    phone = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.isdigit() or len(phone) != 11:
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù—É–∂–Ω–æ 11 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 79991234567)\n\nüîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</i>", parse_mode='HTML')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    try:
        db = SessionLocal()
        existing_person = db.query(Person).filter(Person.phone == phone).first()
        db.close()
        if existing_person:
            await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ó–∞–ø–∏—Å—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\nüîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:</i>", parse_mode='HTML')
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_temp_data[user_id]['phone'] = phone
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await AddPersonStates.waiting_for_birth.set()
    await message.answer(
        "‚úÖ <b>–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω:</b> " + phone + "\n\n"
        "üîÑ <b>–®–∞–≥ 3/6:</b> –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
        "üìÖ <i>–§–æ—Ä–º–∞—Ç:</i> YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1992-03-15)",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message_handler(state=AddPersonStates.waiting_for_birth)
async def process_birth(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–û—Ç–º–µ–Ω–∞"
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_add_process(message, state, user_id, username)
        return
    
    birth = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    try:
        year, month, day = birth.split('-')
        if len(year) != 4 or len(month) != 2 or len(day) != 2:
            raise ValueError
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
        datetime.strptime(birth, '%Y-%m-%d')
    except:
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1992-03-15)\n\nüîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</i>", parse_mode='HTML')
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_temp_data[user_id]['birth'] = birth
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await AddPersonStates.waiting_for_car.set()
    await message.answer(
        "‚úÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:</b> " + birth + "\n\n"
        "üîÑ <b>–®–∞–≥ 4/6:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')\n\n"
        "üöó <i>–ü—Ä–∏–º–µ—Ä:</i> A123AA123\n"
        "‚è≠Ô∏è <i>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:</i> –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
@dp.message_handler(state=AddPersonStates.waiting_for_car)
async def process_car(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–û—Ç–º–µ–Ω–∞"
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_add_process(message, state, user_id, username)
        return
    
    car_number = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    if car_number.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '–Ω–µ—Ç', '–Ω']:
        car_number = ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_temp_data[user_id]['car_number'] = car_number
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await AddPersonStates.waiting_for_address.set()
    await message.answer(
        "‚úÖ <b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω:</b> " + (car_number if car_number else "–Ω–µ —É–∫–∞–∑–∞–Ω") + "\n\n"
        "üîÑ <b>–®–∞–≥ 5/6:</b> –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')\n\n"
        "üè† <i>–ü—Ä–∏–º–µ—Ä:</i> –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1, –∫–≤. 1\n"
        "‚è≠Ô∏è <i>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:</i> –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
@dp.message_handler(state=AddPersonStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–û—Ç–º–µ–Ω–∞"
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_add_process(message, state, user_id, username)
        return
    
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    if address.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '–Ω–µ—Ç', '–Ω']:
        address = ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_temp_data[user_id]['address'] = address
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await AddPersonStates.waiting_for_passport.set()
    await message.answer(
        "‚úÖ <b>–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:</b> " + (address if address else "–Ω–µ —É–∫–∞–∑–∞–Ω") + "\n\n"
        "üîÑ <b>–®–∞–≥ 6/6:</b> –í–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')\n\n"
        "üìÑ <i>–ü—Ä–∏–º–µ—Ä:</i> 1234 567890\n"
        "‚è≠Ô∏è <i>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:</i> –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
@dp.message_handler(state=AddPersonStates.waiting_for_passport)
async def process_passport(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–û—Ç–º–µ–Ω–∞"
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_add_process(message, state, user_id, username)
        return
    
    passport = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    if passport.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '–Ω–µ—Ç', '–Ω']:
        passport = ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_temp_data[user_id]['passport'] = passport
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await finish_add_process(message, state, user_id, username)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async def finish_add_process(message: types.Message, state: FSMContext, user_id: int, username: str):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    temp_data = user_temp_data.get(user_id, {})
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    new_record = {
        "fio": temp_data.get('fio', ''),
        "phone": temp_data.get('phone', ''),
        "birth": temp_data.get('birth', ''),
        "car_number": temp_data.get('car_number', ''),
        "address": temp_data.get('address', ''),
        "passport": temp_data.get('passport', '')
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    saved_person = save_person(new_record)
    if saved_person:
        log_user_action(user_id, username, "ADD_SUCCESS", f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {new_record['fio']}, {new_record['phone']}, {new_record['birth']}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        result_message = "üéâ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        result_message += format_record(saved_person)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        role = get_user_role(user_id)
        if role == "admin":
            keyboard = get_admin_keyboard()
        else:
            keyboard = get_main_keyboard()
        
        await message.answer(result_message, reply_markup=keyboard, parse_mode='HTML')
    else:
        log_user_action(user_id, username, "ADD_ERROR", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode='HTML')
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in user_temp_data:
        del user_temp_data[user_id]
    await state.finish()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async def cancel_add_process(message: types.Message, state: FSMContext, user_id: int, username: str):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    log_user_action(user_id, username, "ADD_CANCELLED", "–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_temp_data:
        del user_temp_data[user_id]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    role = get_user_role(user_id)
    if role == "admin":
        keyboard = get_admin_keyboard()
    else:
        keyboard = get_main_keyboard()
    
    await message.answer("‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>", reply_markup=keyboard, parse_mode='HTML')
    await state.finish()

@dp.message_handler(lambda message: message.text == "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
async def help_button_handler(message: types.Message):
    if not is_authorized(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /start")
        return
    help_text = """üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –±–æ—Ç—É:
–°–ø—Ä–∞–≤–∫–∞: –¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    await message.answer(help_text)

@dp.message_handler(lambda message: message.text == "üìä –õ–æ–≥–∏")
async def logs_button_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    if not is_authorized(user_id):
        log_user_action(user_id, username, "LOGS_BUTTON", "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /start")
        return
    
    if not is_admin(user_id):
        log_user_action(user_id, username, "LOGS_BUTTON", "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    log_user_action(user_id, username, "LOGS_BUTTON", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É (–∞–¥–º–∏–Ω)")
    
    logs = get_failed_auth_logs(10)  # –¢–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    if not logs:
        await message.answer("üîí –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    log_text = "üö® –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
    for log in reversed(logs):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        log_text += f"üïê {log['timestamp']}\n"
        log_text += f"üë§ {log['username']} (ID: {log['user_id']})\n"
        log_text += f"‚ùå {log['action']}\n"
        if log['details']:
            log_text += f"üìù {log['details']}\n"
        log_text += "‚îÄ" * 30 + "\n"
    
    await message.answer(log_text)

@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def commands_button_handler(message: types.Message):
    if not is_authorized(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /start")
        return
    commands_text = """üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîç –ü–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –ø–æ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ, –∞–¥—Ä–µ—Å—É –∏–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç—É
‚ûï –î–æ–±–∞–≤–∏—Ç—å - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥)
üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ –î–ª—è –ø–æ–∏—Å–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /find <–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ–º–µ—Ä –∞–≤—Ç–æ, –∞–¥—Ä–µ—Å –∏–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç>. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å \n
‚Ä¢ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –∏–ª–∏ –∫–Ω–æ–ø–∫—É "‚ûï –î–æ–±–∞–≤–∏—Ç—å" - –±–æ—Ç –ø—Ä–æ–≤–µ–¥–µ—Ç –≤–∞—Å —á–µ—Ä–µ–∑ –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö \n
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: /info - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ

üîç –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:
‚Ä¢ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 79991234567)
‚Ä¢ –ù–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: A111AA11)
‚Ä¢ –ê–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥–æ–º 23, –∫–≤ 1)
‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234 456789)

üìù –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:
1. –§–ò–û (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
2. –¢–µ–ª–µ—Ñ–æ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, 11 —Ü–∏—Ñ—Ä)
3. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD)
4. –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
5. –ê–¥—Ä–µ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
6. –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)

–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∞"."""
    await message.answer(commands_text)

# –ö–æ–º–∞–Ω–¥–∞ /find
@dp.message_handler(commands=["find"])
async def find_cmd(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    if not is_authorized(user_id):
        log_user_action(user_id, username, "FIND_COMMAND", "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /start")
        return
    
    query = message.get_args().strip()
    if not query:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω
        await SearchStates.waiting_for_query.set()
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π: /find <–∑–∞–ø—Ä–æ—Å> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∏–∂–µ:",
            parse_mode='HTML'
        )
        return

    results = []
    persons = search_persons(query)
    for person in persons:
        results.append(format_record(person))

    if results:
        log_user_action(user_id, username, "SEARCH_SUCCESS", f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        result_message = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}</b>\n\n"
        result_message += "\n\n".join(results)
        await message.answer(result_message, parse_mode='HTML')
    else:
        log_user_action(user_id, username, "SEARCH_NO_RESULTS", f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        await message.answer("üîç <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</i>", parse_mode='HTML')

# –ö–æ–º–∞–Ω–¥–∞ /add (—Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
@dp.message_handler(commands=["add"])
async def add_cmd(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    if not is_authorized(user_id):
        log_user_action(user_id, username, "ADD_COMMAND", "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /start")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_temp_data[user_id] = {}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await AddPersonStates.waiting_for_fio.set()
    log_user_action(user_id, username, "ADD_START", "–ù–∞—á–∞–ª–æ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=False,
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]]
    )
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏</b>\n\n"
        "üîÑ <b>–®–∞–≥ 1/6:</b> –í–≤–µ–¥–∏—Ç–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)\n\n"
        "üí° <i>–ü—Ä–∏–º–µ—Ä:</i> –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message_handler(commands=["info"])
async def help_cmd(message: types.Message):
    if not is_authorized(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /start")
        return
    help_text = """–°–ø—Ä–∞–≤–∫–∞: –¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    await message.answer(help_text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["logs"])
async def logs_cmd(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    if not is_authorized(user_id):
        log_user_action(user_id, username, "LOGS_COMMAND", "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /start")
        return
    
    if not is_admin(user_id):
        log_user_action(user_id, username, "LOGS_COMMAND", "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    log_user_action(user_id, username, "LOGS_COMMAND", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π (–∞–¥–º–∏–Ω)")
    
    logs = get_failed_auth_logs(10)  # –¢–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    if not logs:
        await message.answer("üîí –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    log_text = "üö® –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
    for log in reversed(logs):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        log_text += f"üïê {log['timestamp']}\n"
        log_text += f"üë§ {log['username']} (ID: {log['user_id']})\n"
        log_text += f"‚ùå {log['action']}\n"
        if log['details']:
            log_text += f"üìù {log['details']}\n"
        log_text += "‚îÄ" * 30 + "\n"
    
    await message.answer(log_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π ‚Äî –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—è –ø–æ–∏—Å–∫
@dp.message_handler(content_types=["text"], state=None)
async def unknown_text_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"

    if not is_authorized(user_id):
        log_user_action(user_id, username, "UNKNOWN_COMMAND", "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    log_user_action(user_id, username, "UNKNOWN_COMMAND", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message.text}")
    await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /find, /add, /info")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)